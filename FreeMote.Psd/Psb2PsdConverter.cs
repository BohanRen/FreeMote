using System.Drawing;
using System.Drawing.Imaging;
using FreeMote.Psb;
using PhotoshopFile;

namespace FreeMote.Psd
{
    public class Psb2PsdConverter
    {
        public PSB Source { get; set; }

        public Psb2PsdConverter(PSB psb)
        {
            Source = psb;
        }

        private Bitmap GenerateMarkText(string text, int width, int height)
        {
            Bitmap bmp = new Bitmap(width, height, PixelFormat.Format32bppArgb);
            Graphics g = Graphics.FromImage(bmp);
            StringFormat sf = StringFormat.GenericTypographic;
            SizeF labelBox = g.MeasureString(text, SystemFonts.MenuFont, new SizeF(bmp.Size), sf);
            RectangleF rectBounds = new Rectangle(0, 0, (int)labelBox.Width, (int)labelBox.Height);
            g.FillRectangle(Brushes.Transparent, rectBounds);
            g.DrawString(text, SystemFonts.MenuFont, Brushes.Black, 1f, 1f);
            g.Dispose();
            return bmp;
        }

        public PsdFile ConvertToPsd(int width, int height)
        {
            PsdFile psd = new PsdFile() { Width = width, Height = height };
            psd.Resolution = new ResolutionInfo()
            {
                HeightDisplayUnit = ResolutionInfo.Unit.Centimeters,
                WidthDisplayUnit = ResolutionInfo.Unit.Centimeters,
                HResDisplayUnit = ResolutionInfo.ResUnit.PxPerInch,
                VResDisplayUnit = ResolutionInfo.ResUnit.PxPerInch,
                HDpi = new UFixed16_16(0, 350),
                VDpi = new UFixed16_16(0, 350)
            };
            psd.ImageCompression = ImageCompression.Rle;

            psd.BaseLayer.SetBitmap(new Bitmap(width, height, PixelFormat.Format32bppArgb),
                ImageReplaceOption.KeepCenter, psd.ImageCompression);

            PsbPainter painter = new PsbPainter(Source);
            string currentGroup = "";
            Layer beginSection = null;
            foreach (var resMd in painter.Resources)
            {
                if (resMd.Label.StartsWith(PsbPainter.GroupMark))
                {
                    resMd.Label = resMd.Label.Substring(1);
                }
                string name = $"{resMd.Label}-{resMd.Name}";

                var layer = psd.MakeImageLayer(resMd.ToImage(), name, (int)(resMd.OriginX + width / 2f - resMd.Width / 2f),
                    (int)(resMd.OriginY + height / 2f - resMd.Height / 2f));
                layer.Visible = resMd.Visible;
                if (resMd.Opacity <= 0)
                {
                    layer.Opacity = 0;
                }
                if (resMd.ObjName != currentGroup)
                {
                    currentGroup = resMd.ObjName;
                    if (beginSection != null)
                    {
                        psd.Layers.Add(beginSection);
                        beginSection = null;
                    }

                    if (!string.IsNullOrEmpty(currentGroup))
                    {
                        beginSection = psd.MakeSectionLayers(currentGroup, out var endlayer, false);
                        psd.Layers.Add(endlayer);
                    }
                }
                psd.Layers.Add(layer);
            }

            if (beginSection != null)
            {
                psd.Layers.Add(beginSection);
            }
            psd.Layers.Add(psd.MakeImageLayer(
                GenerateMarkText("Generated by FreeMote, wdwxy12345@gmail.com ", width / 2, 200), "FreeMote", 0, 0));
            return psd;
        }
    }
}
